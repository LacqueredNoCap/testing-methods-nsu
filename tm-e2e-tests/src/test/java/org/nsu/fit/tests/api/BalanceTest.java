package org.nsu.fit.tests.api;

import java.util.List;
import java.util.Objects;

import io.qameta.allure.Feature;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;

import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import org.nsu.fit.services.rest.RestClient;
import org.nsu.fit.services.rest.data.AccountTokenPojo;
import org.nsu.fit.services.rest.data.CustomerPojo;
import org.nsu.fit.services.rest.data.TopUpBalanceRequest;

public class BalanceTest {

    private RestClient restClient;
    private AccountTokenPojo adminToken;
    private CustomerPojo customerPojo;
    private AccountTokenPojo customerToken;

    @BeforeClass
    private void setUp() {
        restClient = new RestClient();
        adminToken = restClient.authenticate("admin", "setup");
        customerPojo = restClient.createAutoGeneratedCustomer(adminToken);
        customerToken = restClient.authenticate(customerPojo.login, customerPojo.pass);
    }

    @Test(description = "Check initial balance.")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Balance feature")
    public void checkInitialBalance() {
        List<CustomerPojo> customers =
                restClient.getCustomerByLogin(customerPojo.login, adminToken);

        Assert.assertTrue(Objects.nonNull(customers) && !customers.isEmpty());

        Assert.assertEquals(customers.get(0).balance, customerPojo.balance);
    }

    @Test(dependsOnMethods = {"checkInitialBalance"}, description = "Update balance.")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Balance feature")
    public void topUpBalance() {
        int money = 1000;
        TopUpBalanceRequest topUpBalanceRequest = new TopUpBalanceRequest();
        topUpBalanceRequest.money = money;

        restClient.topUpBalance(topUpBalanceRequest, customerToken);

        List<CustomerPojo> customers = restClient.getCustomerByLogin(customerPojo.login, customerToken);

        Assert.assertTrue(Objects.nonNull(customers) && !customers.isEmpty());

        Assert.assertEquals(customers.get(0).balance, customerPojo.balance + money);
    }
}
