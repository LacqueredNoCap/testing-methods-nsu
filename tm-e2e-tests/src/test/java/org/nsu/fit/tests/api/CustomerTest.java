package org.nsu.fit.tests.api;

import io.qameta.allure.Feature;
import io.qameta.allure.Severity;
import io.qameta.allure.SeverityLevel;
import org.nsu.fit.services.rest.RestClient;
import org.nsu.fit.services.rest.data.AccountTokenPojo;
import org.nsu.fit.services.rest.data.CustomerPojo;
import org.nsu.fit.utils.TestUtils;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.util.List;
import java.util.Optional;

public class CustomerTest {

    private RestClient restClient;
    private AccountTokenPojo adminToken;

    @BeforeClass
    private void setUp() {
        restClient = new RestClient();
        adminToken = restClient.authenticate("admin", "setup");
    }

    @Test(description = "Create customer.")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Customer creation feature")
    public void createCustomer() {
        CustomerPojo generatedCustomer = restClient.createAutoGeneratedCustomer(adminToken);

        List<CustomerPojo> customerPojoList = restClient.getCustomers(adminToken);

        Optional<CustomerPojo> customerPojo1 = customerPojoList.stream()
                .filter(customer -> TestUtils.isEqual(customer, generatedCustomer))
                .findFirst();
        Assert.assertTrue(customerPojo1.isPresent());
    }

    @Test(description = "Delete customer.")
    @Severity(SeverityLevel.BLOCKER)
    @Feature("Customer deletion feature")
    public void deleteCustomer() {
        CustomerPojo generatedCustomer = restClient.createAutoGeneratedCustomer(adminToken);

        restClient.deleteCustomer(generatedCustomer.id, adminToken);
        List<CustomerPojo> customerPojoList = restClient.getCustomers(adminToken);

        Optional<CustomerPojo> customerPojo1 = customerPojoList.stream()
                .filter(customer -> TestUtils.isEqual(customer, generatedCustomer))
                .findFirst();
        Assert.assertFalse(customerPojo1.isPresent());
    }
}
